(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~widgetsystem"],{

/***/ "9BHx":
/*!**************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * gridstack.js 0.3.0\n * http://troolee.github.io/gridstack.js/\n * (c) 2014-2016 Pavel Reznikov, Dylan Weiss\n * gridstack.js may be freely distributed under the MIT license.\n * @preserve\n*/\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"EVdn\"), __webpack_require__(/*! lodash */ \"LvDl\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function($, _) {\n\n    var scope = window;\n\n    var obsolete = function(f, oldName, newName) {\n        var wrapper = function() {\n            console.warn('gridstack.js: Function `' + oldName + '` is deprecated as of v0.2.5 and has been replaced ' +\n            'with `' + newName + '`. It will be **completely** removed in v1.0.');\n            return f.apply(this, arguments);\n        };\n        wrapper.prototype = f.prototype;\n\n        return wrapper;\n    };\n\n    var obsoleteOpts = function(oldName, newName) {\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated as of v0.2.5 and has been replaced with `' +\n            newName + '`. It will be **completely** removed in v1.0.');\n    };\n\n    var Utils = {\n        isIntercepted: function(a, b) {\n            return !(a.x + a.width <= b.x || b.x + b.width <= a.x || a.y + a.height <= b.y || b.y + b.height <= a.y);\n        },\n\n        sort: function(nodes, dir, width) {\n            width = width || _.chain(nodes).map(function(node) { return node.x + node.width; }).max().value();\n            dir = dir != -1 ? 1 : -1;\n            return _.sortBy(nodes, function(n) { return dir * (n.x + n.y * width); });\n        },\n\n        createStylesheet: function(id) {\n            var style = document.createElement('style');\n            style.setAttribute('type', 'text/css');\n            style.setAttribute('data-gs-style-id', id);\n            if (style.styleSheet) {\n                style.styleSheet.cssText = '';\n            } else {\n                style.appendChild(document.createTextNode(''));\n            }\n            document.getElementsByTagName('head')[0].appendChild(style);\n            return style.sheet;\n        },\n\n        removeStylesheet: function(id) {\n            $('STYLE[data-gs-style-id=' + id + ']').remove();\n        },\n\n        insertCSSRule: function(sheet, selector, rules, index) {\n            if (typeof sheet.insertRule === 'function') {\n                sheet.insertRule(selector + '{' + rules + '}', index);\n            } else if (typeof sheet.addRule === 'function') {\n                sheet.addRule(selector, rules, index);\n            }\n        },\n\n        toBool: function(v) {\n            if (typeof v == 'boolean') {\n                return v;\n            }\n            if (typeof v == 'string') {\n                v = v.toLowerCase();\n                return !(v === '' || v == 'no' || v == 'false' || v == '0');\n            }\n            return Boolean(v);\n        },\n\n        _collisionNodeCheck: function(n) {\n            return n != this.node && Utils.isIntercepted(n, this.nn);\n        },\n\n        _didCollide: function(bn) {\n            return Utils.isIntercepted({x: this.n.x, y: this.newY, width: this.n.width, height: this.n.height}, bn);\n        },\n\n        _isAddNodeIntercepted: function(n) {\n            return Utils.isIntercepted({x: this.x, y: this.y, width: this.node.width, height: this.node.height}, n);\n        },\n\n        parseHeight: function(val) {\n            var height = val;\n            var heightUnit = 'px';\n            if (height && _.isString(height)) {\n                var match = height.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw)?$/);\n                if (!match) {\n                    throw new Error('Invalid height');\n                }\n                heightUnit = match[2] || 'px';\n                height = parseFloat(match[1]);\n            }\n            return {height: height, unit: heightUnit};\n        }\n    };\n\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    Utils.is_intercepted = obsolete(Utils.isIntercepted, 'is_intercepted', 'isIntercepted');\n\n    Utils.create_stylesheet = obsolete(Utils.createStylesheet, 'create_stylesheet', 'createStylesheet');\n\n    Utils.remove_stylesheet = obsolete(Utils.removeStylesheet, 'remove_stylesheet', 'removeStylesheet');\n\n    Utils.insert_css_rule = obsolete(Utils.insertCSSRule, 'insert_css_rule', 'insertCSSRule');\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n    /**\n    * @class GridStackDragDropPlugin\n    * Base class for drag'n'drop plugin.\n    */\n    function GridStackDragDropPlugin(grid) {\n        this.grid = grid;\n    }\n\n    GridStackDragDropPlugin.registeredPlugins = [];\n\n    GridStackDragDropPlugin.registerPlugin = function(pluginClass) {\n        GridStackDragDropPlugin.registeredPlugins.push(pluginClass);\n    };\n\n    GridStackDragDropPlugin.prototype.resizable = function(el, opts) {\n        return this;\n    };\n\n    GridStackDragDropPlugin.prototype.draggable = function(el, opts) {\n        return this;\n    };\n\n    GridStackDragDropPlugin.prototype.droppable = function(el, opts) {\n        return this;\n    };\n\n    GridStackDragDropPlugin.prototype.isDroppable = function(el) {\n        return false;\n    };\n\n    GridStackDragDropPlugin.prototype.on = function(el, eventName, callback) {\n        return this;\n    };\n\n\n    var idSeq = 0;\n\n    var GridStackEngine = function(width, onchange, floatMode, height, items) {\n        this.width = width;\n        this.float = floatMode || false;\n        this.height = height || 0;\n\n        this.nodes = items || [];\n        this.onchange = onchange || function() {};\n\n        this._updateCounter = 0;\n        this._float = this.float;\n\n        this._addedNodes = [];\n        this._removedNodes = [];\n    };\n\n    GridStackEngine.prototype.batchUpdate = function() {\n        this._updateCounter = 1;\n        this.float = true;\n    };\n\n    GridStackEngine.prototype.commit = function() {\n        if (this._updateCounter !== 0) {\n            this._updateCounter = 0;\n            this.float = this._float;\n            this._packNodes();\n            this._notify();\n        }\n    };\n\n    // For Meteor support: https://github.com/troolee/gridstack.js/pull/272\n    GridStackEngine.prototype.getNodeDataByDOMEl = function(el) {\n        return _.find(this.nodes, function(n) { return el.get(0) === n.el.get(0); });\n    };\n\n    GridStackEngine.prototype._fixCollisions = function(node) {\n        var self = this;\n        this._sortNodes(-1);\n\n        var nn = node;\n        var hasLocked = Boolean(_.find(this.nodes, function(n) { return n.locked; }));\n        if (!this.float && !hasLocked) {\n            nn = {x: 0, y: node.y, width: this.width, height: node.height};\n        }\n        while (true) {\n            var collisionNode = _.find(this.nodes, _.bind(Utils._collisionNodeCheck, {node: node, nn: nn}));\n            if (typeof collisionNode == 'undefined') {\n                return;\n            }\n            this.moveNode(collisionNode, collisionNode.x, node.y + node.height,\n                collisionNode.width, collisionNode.height, true);\n        }\n    };\n\n    GridStackEngine.prototype.isAreaEmpty = function(x, y, width, height) {\n        var nn = {x: x || 0, y: y || 0, width: width || 1, height: height || 1};\n        var collisionNode = _.find(this.nodes, _.bind(function(n) {\n            return Utils.isIntercepted(n, nn);\n        }, this));\n        return collisionNode === null || typeof collisionNode === 'undefined';\n    };\n\n    GridStackEngine.prototype._sortNodes = function(dir) {\n        this.nodes = Utils.sort(this.nodes, dir, this.width);\n    };\n\n    GridStackEngine.prototype._packNodes = function() {\n        this._sortNodes();\n\n        if (this.float) {\n            _.each(this.nodes, _.bind(function(n, i) {\n                if (n._updating || typeof n._origY == 'undefined' || n.y == n._origY) {\n                    return;\n                }\n\n                var newY = n.y;\n                while (newY >= n._origY) {\n                    var collisionNode = _.chain(this.nodes)\n                        .find(_.bind(Utils._didCollide, {n: n, newY: newY}))\n                        .value();\n\n                    if (!collisionNode) {\n                        n._dirty = true;\n                        n.y = newY;\n                    }\n                    --newY;\n                }\n            }, this));\n        } else {\n            _.each(this.nodes, _.bind(function(n, i) {\n                if (n.locked) {\n                    return;\n                }\n                while (n.y > 0) {\n                    var newY = n.y - 1;\n                    var canBeMoved = i === 0;\n\n                    if (i > 0) {\n                        var collisionNode = _.chain(this.nodes)\n                            .take(i)\n                            .find(_.bind(Utils._didCollide, {n: n, newY: newY}))\n                            .value();\n                        canBeMoved = typeof collisionNode == 'undefined';\n                    }\n\n                    if (!canBeMoved) {\n                        break;\n                    }\n                    n._dirty = n.y != newY;\n                    n.y = newY;\n                }\n            }, this));\n        }\n    };\n\n    GridStackEngine.prototype._prepareNode = function(node, resizing) {\n        node = _.defaults(node || {}, {width: 1, height: 1, x: 0, y: 0});\n\n        node.x = parseInt('' + node.x);\n        node.y = parseInt('' + node.y);\n        node.width = parseInt('' + node.width);\n        node.height = parseInt('' + node.height);\n        node.autoPosition = node.autoPosition || false;\n        node.noResize = node.noResize || false;\n        node.noMove = node.noMove || false;\n\n        if (node.width > this.width) {\n            node.width = this.width;\n        } else if (node.width < 1) {\n            node.width = 1;\n        }\n\n        if (node.height < 1) {\n            node.height = 1;\n        }\n\n        if (node.x < 0) {\n            node.x = 0;\n        }\n\n        if (node.x + node.width > this.width) {\n            if (resizing) {\n                node.width = this.width - node.x;\n            } else {\n                node.x = this.width - node.width;\n            }\n        }\n\n        if (node.y < 0) {\n            node.y = 0;\n        }\n\n        return node;\n    };\n\n    GridStackEngine.prototype._notify = function() {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args[0] = typeof args[0] === 'undefined' ? [] : [args[0]];\n        args[1] = typeof args[1] === 'undefined' ? true : args[1];\n        if (this._updateCounter) {\n            return;\n        }\n        var deletedNodes = args[0].concat(this.getDirtyNodes());\n        this.onchange(deletedNodes, args[1]);\n    };\n\n    GridStackEngine.prototype.cleanNodes = function() {\n        if (this._updateCounter) {\n            return;\n        }\n        _.each(this.nodes, function(n) {n._dirty = false; });\n    };\n\n    GridStackEngine.prototype.getDirtyNodes = function() {\n        return _.filter(this.nodes, function(n) { return n._dirty; });\n    };\n\n    GridStackEngine.prototype.addNode = function(node, triggerAddEvent) {\n        node = this._prepareNode(node);\n\n        if (typeof node.maxWidth != 'undefined') { node.width = Math.min(node.width, node.maxWidth); }\n        if (typeof node.maxHeight != 'undefined') { node.height = Math.min(node.height, node.maxHeight); }\n        if (typeof node.minWidth != 'undefined') { node.width = Math.max(node.width, node.minWidth); }\n        if (typeof node.minHeight != 'undefined') { node.height = Math.max(node.height, node.minHeight); }\n\n        node._id = ++idSeq;\n        node._dirty = true;\n\n        if (node.autoPosition) {\n            this._sortNodes();\n\n            for (var i = 0;; ++i) {\n                var x = i % this.width;\n                var y = Math.floor(i / this.width);\n                if (x + node.width > this.width) {\n                    continue;\n                }\n                if (!_.find(this.nodes, _.bind(Utils._isAddNodeIntercepted, {x: x, y: y, node: node}))) {\n                    node.x = x;\n                    node.y = y;\n                    break;\n                }\n            }\n        }\n\n        this.nodes.push(node);\n        if (typeof triggerAddEvent != 'undefined' && triggerAddEvent) {\n            this._addedNodes.push(_.clone(node));\n        }\n\n        this._fixCollisions(node);\n        this._packNodes();\n        this._notify();\n        return node;\n    };\n\n    GridStackEngine.prototype.removeNode = function(node, detachNode) {\n        detachNode = typeof detachNode === 'undefined' ? true : detachNode;\n        this._removedNodes.push(_.clone(node));\n        node._id = null;\n        this.nodes = _.without(this.nodes, node);\n        this._packNodes();\n        this._notify(node, detachNode);\n    };\n\n    GridStackEngine.prototype.canMoveNode = function(node, x, y, width, height) {\n        if (!this.isNodeChangedPosition(node, x, y, width, height)) {\n            return false;\n        }\n        var hasLocked = Boolean(_.find(this.nodes, function(n) { return n.locked; }));\n\n        if (!this.height && !hasLocked) {\n            return true;\n        }\n\n        var clonedNode;\n        var clone = new GridStackEngine(\n            this.width,\n            null,\n            this.float,\n            0,\n            _.map(this.nodes, function(n) {\n                if (n == node) {\n                    clonedNode = $.extend({}, n);\n                    return clonedNode;\n                }\n                return $.extend({}, n);\n            }));\n\n        if (typeof clonedNode === 'undefined') {\n            return true;\n        }\n\n        clone.moveNode(clonedNode, x, y, width, height);\n\n        var res = true;\n\n        if (hasLocked) {\n            res &= !Boolean(_.find(clone.nodes, function(n) {\n                return n != clonedNode && Boolean(n.locked) && Boolean(n._dirty);\n            }));\n        }\n        if (this.height) {\n            res &= clone.getGridHeight() <= this.height;\n        }\n\n        return res;\n    };\n\n    GridStackEngine.prototype.canBePlacedWithRespectToHeight = function(node) {\n        if (!this.height) {\n            return true;\n        }\n\n        var clone = new GridStackEngine(\n            this.width,\n            null,\n            this.float,\n            0,\n            _.map(this.nodes, function(n) { return $.extend({}, n); }));\n        clone.addNode(node);\n        return clone.getGridHeight() <= this.height;\n    };\n\n    GridStackEngine.prototype.isNodeChangedPosition = function(node, x, y, width, height) {\n        if (typeof x != 'number') { x = node.x; }\n        if (typeof y != 'number') { y = node.y; }\n        if (typeof width != 'number') { width = node.width; }\n        if (typeof height != 'number') { height = node.height; }\n\n        if (typeof node.maxWidth != 'undefined') { width = Math.min(width, node.maxWidth); }\n        if (typeof node.maxHeight != 'undefined') { height = Math.min(height, node.maxHeight); }\n        if (typeof node.minWidth != 'undefined') { width = Math.max(width, node.minWidth); }\n        if (typeof node.minHeight != 'undefined') { height = Math.max(height, node.minHeight); }\n\n        if (node.x == x && node.y == y && node.width == width && node.height == height) {\n            return false;\n        }\n        return true;\n    };\n\n    GridStackEngine.prototype.moveNode = function(node, x, y, width, height, noPack) {\n        if (!this.isNodeChangedPosition(node, x, y, width, height)) {\n            return node;\n        }\n        if (typeof x != 'number') { x = node.x; }\n        if (typeof y != 'number') { y = node.y; }\n        if (typeof width != 'number') { width = node.width; }\n        if (typeof height != 'number') { height = node.height; }\n\n        if (typeof node.maxWidth != 'undefined') { width = Math.min(width, node.maxWidth); }\n        if (typeof node.maxHeight != 'undefined') { height = Math.min(height, node.maxHeight); }\n        if (typeof node.minWidth != 'undefined') { width = Math.max(width, node.minWidth); }\n        if (typeof node.minHeight != 'undefined') { height = Math.max(height, node.minHeight); }\n\n        if (node.x == x && node.y == y && node.width == width && node.height == height) {\n            return node;\n        }\n\n        var resizing = node.width != width;\n        node._dirty = true;\n\n        node.x = x;\n        node.y = y;\n        node.width = width;\n        node.height = height;\n\n        node.lastTriedX = x;\n        node.lastTriedY = y;\n        node.lastTriedWidth = width;\n        node.lastTriedHeight = height;\n\n        node = this._prepareNode(node, resizing);\n\n        this._fixCollisions(node);\n        if (!noPack) {\n            this._packNodes();\n            this._notify();\n        }\n        return node;\n    };\n\n    GridStackEngine.prototype.getGridHeight = function() {\n        return _.reduce(this.nodes, function(memo, n) { return Math.max(memo, n.y + n.height); }, 0);\n    };\n\n    GridStackEngine.prototype.beginUpdate = function(node) {\n        _.each(this.nodes, function(n) {\n            n._origY = n.y;\n        });\n        node._updating = true;\n    };\n\n    GridStackEngine.prototype.endUpdate = function() {\n        _.each(this.nodes, function(n) {\n            n._origY = n.y;\n        });\n        var n = _.find(this.nodes, function(n) { return n._updating; });\n        if (n) {\n            n._updating = false;\n        }\n    };\n\n    var GridStack = function(el, opts) {\n        var self = this;\n        var oneColumnMode, isAutoCellHeight;\n\n        opts = opts || {};\n\n        this.container = $(el);\n\n        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n        if (typeof opts.handle_class !== 'undefined') {\n            opts.handleClass = opts.handle_class;\n            obsoleteOpts('handle_class', 'handleClass');\n        }\n        if (typeof opts.item_class !== 'undefined') {\n            opts.itemClass = opts.item_class;\n            obsoleteOpts('item_class', 'itemClass');\n        }\n        if (typeof opts.placeholder_class !== 'undefined') {\n            opts.placeholderClass = opts.placeholder_class;\n            obsoleteOpts('placeholder_class', 'placeholderClass');\n        }\n        if (typeof opts.placeholder_text !== 'undefined') {\n            opts.placeholderText = opts.placeholder_text;\n            obsoleteOpts('placeholder_text', 'placeholderText');\n        }\n        if (typeof opts.cell_height !== 'undefined') {\n            opts.cellHeight = opts.cell_height;\n            obsoleteOpts('cell_height', 'cellHeight');\n        }\n        if (typeof opts.vertical_margin !== 'undefined') {\n            opts.verticalMargin = opts.vertical_margin;\n            obsoleteOpts('vertical_margin', 'verticalMargin');\n        }\n        if (typeof opts.min_width !== 'undefined') {\n            opts.minWidth = opts.min_width;\n            obsoleteOpts('min_width', 'minWidth');\n        }\n        if (typeof opts.static_grid !== 'undefined') {\n            opts.staticGrid = opts.static_grid;\n            obsoleteOpts('static_grid', 'staticGrid');\n        }\n        if (typeof opts.is_nested !== 'undefined') {\n            opts.isNested = opts.is_nested;\n            obsoleteOpts('is_nested', 'isNested');\n        }\n        if (typeof opts.always_show_resize_handle !== 'undefined') {\n            opts.alwaysShowResizeHandle = opts.always_show_resize_handle;\n            obsoleteOpts('always_show_resize_handle', 'alwaysShowResizeHandle');\n        }\n        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n        opts.itemClass = opts.itemClass || 'grid-stack-item';\n        var isNested = this.container.closest('.' + opts.itemClass).length > 0;\n\n        this.opts = _.defaults(opts || {}, {\n            width: parseInt(this.container.attr('data-gs-width')) || 12,\n            height: parseInt(this.container.attr('data-gs-height')) || 0,\n            itemClass: 'grid-stack-item',\n            placeholderClass: 'grid-stack-placeholder',\n            placeholderText: '',\n            handle: '.grid-stack-item-content',\n            handleClass: null,\n            cellHeight: 60,\n            verticalMargin: 20,\n            auto: true,\n            minWidth: 768,\n            float: false,\n            staticGrid: false,\n            _class: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\n            animate: Boolean(this.container.attr('data-gs-animate')) || false,\n            alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\n            resizable: _.defaults(opts.resizable || {}, {\n                autoHide: !(opts.alwaysShowResizeHandle || false),\n                handles: 'se'\n            }),\n            draggable: _.defaults(opts.draggable || {}, {\n                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) ||\n                    '.grid-stack-item-content',\n                scroll: false,\n                appendTo: 'body'\n            }),\n            disableDrag: opts.disableDrag || false,\n            disableResize: opts.disableResize || false,\n            rtl: 'auto',\n            removable: false,\n            removeTimeout: 2000,\n            verticalMarginUnit: 'px',\n            cellHeightUnit: 'px',\n            disableOneColumnMode: opts.disableOneColumnMode || false,\n            oneColumnModeClass: opts.oneColumnModeClass || 'grid-stack-one-column-mode',\n            ddPlugin: null\n        });\n\n        if (this.opts.ddPlugin === false) {\n            this.opts.ddPlugin = GridStackDragDropPlugin;\n        } else if (this.opts.ddPlugin === null) {\n            this.opts.ddPlugin = _.first(GridStackDragDropPlugin.registeredPlugins) || GridStackDragDropPlugin;\n        }\n\n        this.dd = new this.opts.ddPlugin(this);\n\n        if (this.opts.rtl === 'auto') {\n            this.opts.rtl = this.container.css('direction') === 'rtl';\n        }\n\n        if (this.opts.rtl) {\n            this.container.addClass('grid-stack-rtl');\n        }\n\n        this.opts.isNested = isNested;\n\n        isAutoCellHeight = this.opts.cellHeight === 'auto';\n        if (isAutoCellHeight) {\n            self.cellHeight(self.cellWidth(), true);\n        } else {\n            this.cellHeight(this.opts.cellHeight, true);\n        }\n        this.verticalMargin(this.opts.verticalMargin, true);\n\n        this.container.addClass(this.opts._class);\n\n        this._setStaticClass();\n\n        if (isNested) {\n            this.container.addClass('grid-stack-nested');\n        }\n\n        this._initStyles();\n\n        this.grid = new GridStackEngine(this.opts.width, function(nodes, detachNode) {\n            detachNode = typeof detachNode === 'undefined' ? true : detachNode;\n            var maxHeight = 0;\n            _.each(nodes, function(n) {\n                if (detachNode && n._id === null) {\n                    if (n.el) {\n                        n.el.remove();\n                    }\n                } else {\n                    n.el\n                        .attr('data-gs-x', n.x)\n                        .attr('data-gs-y', n.y)\n                        .attr('data-gs-width', n.width)\n                        .attr('data-gs-height', n.height);\n                    maxHeight = Math.max(maxHeight, n.y + n.height);\n                }\n            });\n            self._updateStyles(maxHeight + 10);\n        }, this.opts.float, this.opts.height);\n\n        if (this.opts.auto) {\n            var elements = [];\n            var _this = this;\n            this.container.children('.' + this.opts.itemClass + ':not(.' + this.opts.placeholderClass + ')')\n                .each(function(index, el) {\n                el = $(el);\n                elements.push({\n                    el: el,\n                    i: parseInt(el.attr('data-gs-x')) + parseInt(el.attr('data-gs-y')) * _this.opts.width\n                });\n            });\n            _.chain(elements).sortBy(function(x) { return x.i; }).each(function(i) {\n                self._prepareElement(i.el);\n            }).value();\n        }\n\n        this.setAnimation(this.opts.animate);\n\n        this.placeholder = $(\n            '<div class=\"' + this.opts.placeholderClass + ' ' + this.opts.itemClass + '\">' +\n            '<div class=\"placeholder-content\">' + this.opts.placeholderText + '</div></div>').hide();\n\n        this._updateContainerHeight();\n\n        this._updateHeightsOnResize = _.throttle(function() {\n            self.cellHeight(self.cellWidth(), false);\n        }, 100);\n\n        this.onResizeHandler = function() {\n            if (isAutoCellHeight) {\n                self._updateHeightsOnResize();\n            }\n\n            if (self._isOneColumnMode() && !self.opts.disableOneColumnMode) {\n                if (oneColumnMode) {\n                    return;\n                }\n                self.container.addClass(self.opts.oneColumnModeClass);\n                oneColumnMode = true;\n\n                self.grid._sortNodes();\n                _.each(self.grid.nodes, function(node) {\n                    self.container.append(node.el);\n\n                    if (self.opts.staticGrid) {\n                        return;\n                    }\n                    self.dd.draggable(node.el, 'disable');\n                    self.dd.resizable(node.el, 'disable');\n\n                    node.el.trigger('resize');\n                });\n            } else {\n                if (!oneColumnMode) {\n                    return;\n                }\n\n                self.container.removeClass(self.opts.oneColumnModeClass);\n                oneColumnMode = false;\n\n                if (self.opts.staticGrid) {\n                    return;\n                }\n\n                _.each(self.grid.nodes, function(node) {\n                    if (!node.noMove && !self.opts.disableDrag) {\n                        self.dd.draggable(node.el, 'enable');\n                    }\n                    if (!node.noResize && !self.opts.disableResize) {\n                        self.dd.resizable(node.el, 'enable');\n                    }\n\n                    node.el.trigger('resize');\n                });\n            }\n        };\n\n        $(window).resize(this.onResizeHandler);\n        this.onResizeHandler();\n\n        if (!self.opts.staticGrid && typeof self.opts.removable === 'string') {\n            var trashZone = $(self.opts.removable);\n            if (!this.dd.isDroppable(trashZone)) {\n                this.dd.droppable(trashZone, {\n                    accept: '.' + self.opts.itemClass\n                });\n            }\n            this.dd\n                .on(trashZone, 'dropover', function(event, ui) {\n                    var el = $(ui.draggable);\n                    var node = el.data('_gridstack_node');\n                    if (node._grid !== self) {\n                        return;\n                    }\n                    self._setupRemovingTimeout(el);\n                })\n                .on(trashZone, 'dropout', function(event, ui) {\n                    var el = $(ui.draggable);\n                    var node = el.data('_gridstack_node');\n                    if (node._grid !== self) {\n                        return;\n                    }\n                    self._clearRemovingTimeout(el);\n                });\n        }\n\n        if (!self.opts.staticGrid && self.opts.acceptWidgets) {\n            var draggingElement = null;\n\n            var onDrag = function(event, ui) {\n                var el = draggingElement;\n                var node = el.data('_gridstack_node');\n                var pos = self.getCellFromPixel(ui.offset, true);\n                var x = Math.max(0, pos.x);\n                var y = Math.max(0, pos.y);\n                if (!node._added) {\n                    node._added = true;\n\n                    node.el = el;\n                    node.x = x;\n                    node.y = y;\n                    self.grid.cleanNodes();\n                    self.grid.beginUpdate(node);\n                    self.grid.addNode(node);\n\n                    self.container.append(self.placeholder);\n                    self.placeholder\n                        .attr('data-gs-x', node.x)\n                        .attr('data-gs-y', node.y)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .show();\n                    node.el = self.placeholder;\n                    node._beforeDragX = node.x;\n                    node._beforeDragY = node.y;\n\n                    self._updateContainerHeight();\n                } else {\n                    if (!self.grid.canMoveNode(node, x, y)) {\n                        return;\n                    }\n                    self.grid.moveNode(node, x, y);\n                    self._updateContainerHeight();\n                }\n            };\n\n            this.dd\n                .droppable(self.container, {\n                    accept: function(el) {\n                        el = $(el);\n                        var node = el.data('_gridstack_node');\n                        if (node && node._grid === self) {\n                            return false;\n                        }\n                        return el.is(self.opts.acceptWidgets === true ? '.grid-stack-item' : self.opts.acceptWidgets);\n                    }\n                })\n                .on(self.container, 'dropover', function(event, ui) {\n                    var offset = self.container.offset();\n                    var el = $(ui.draggable);\n                    var cellWidth = self.cellWidth();\n                    var cellHeight = self.cellHeight();\n                    var origNode = el.data('_gridstack_node');\n\n                    var width = origNode ? origNode.width : (Math.ceil(el.outerWidth() / cellWidth));\n                    var height = origNode ? origNode.height : (Math.ceil(el.outerHeight() / cellHeight));\n\n                    draggingElement = el;\n\n                    var node = self.grid._prepareNode({width: width, height: height, _added: false, _temporary: true});\n                    el.data('_gridstack_node', node);\n                    el.data('_gridstack_node_orig', origNode);\n\n                    el.on('drag', onDrag);\n                })\n                .on(self.container, 'dropout', function(event, ui) {\n                    var el = $(ui.draggable);\n                    el.unbind('drag', onDrag);\n                    var node = el.data('_gridstack_node');\n                    node.el = null;\n                    self.grid.removeNode(node);\n                    self.placeholder.detach();\n                    self._updateContainerHeight();\n                    el.data('_gridstack_node', el.data('_gridstack_node_orig'));\n                })\n                .on(self.container, 'drop', function(event, ui) {\n                    self.placeholder.detach();\n\n                    var node = $(ui.draggable).data('_gridstack_node');\n                    node._grid = self;\n                    var el = $(ui.draggable).clone(false);\n                    el.data('_gridstack_node', node);\n                    var originalNode = $(ui.draggable).data('_gridstack_node_orig');\n                    if (typeof originalNode !== 'undefined') {\n                        originalNode._grid._triggerRemoveEvent();\n                    }\n                    $(ui.draggable).remove();\n                    node.el = el;\n                    self.placeholder.hide();\n                    el\n                        .attr('data-gs-x', node.x)\n                        .attr('data-gs-y', node.y)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .addClass(self.opts.itemClass)\n                        .removeAttr('style')\n                        .enableSelection()\n                        .removeData('draggable')\n                        .removeClass('ui-draggable ui-draggable-dragging ui-draggable-disabled')\n                        .unbind('drag', onDrag);\n                    self.container.append(el);\n                    self._prepareElementsByNode(el, node);\n                    self._updateContainerHeight();\n                    self.grid._addedNodes.push(node);\n                    self._triggerAddEvent();\n                    self._triggerChangeEvent();\n\n                    self.grid.endUpdate();\n                });\n        }\n    };\n\n    GridStack.prototype._triggerChangeEvent = function(forceTrigger) {\n        var elements = this.grid.getDirtyNodes();\n        var hasChanges = false;\n\n        var eventParams = [];\n        if (elements && elements.length) {\n            eventParams.push(elements);\n            hasChanges = true;\n        }\n\n        if (hasChanges || forceTrigger === true) {\n            this.container.trigger('change', eventParams);\n        }\n    };\n\n    GridStack.prototype._triggerAddEvent = function() {\n        if (this.grid._addedNodes && this.grid._addedNodes.length > 0) {\n            this.container.trigger('added', [_.map(this.grid._addedNodes, _.clone)]);\n            this.grid._addedNodes = [];\n        }\n    };\n\n    GridStack.prototype._triggerRemoveEvent = function() {\n        if (this.grid._removedNodes && this.grid._removedNodes.length > 0) {\n            this.container.trigger('removed', [_.map(this.grid._removedNodes, _.clone)]);\n            this.grid._removedNodes = [];\n        }\n    };\n\n    GridStack.prototype._initStyles = function() {\n        if (this._stylesId) {\n            Utils.removeStylesheet(this._stylesId);\n        }\n        this._stylesId = 'gridstack-style-' + (Math.random() * 100000).toFixed();\n        this._styles = Utils.createStylesheet(this._stylesId);\n        if (this._styles !== null) {\n            this._styles._max = 0;\n        }\n    };\n\n    GridStack.prototype._updateStyles = function(maxHeight) {\n        if (this._styles === null || typeof this._styles === 'undefined') {\n            return;\n        }\n\n        var prefix = '.' + this.opts._class + ' .' + this.opts.itemClass;\n        var self = this;\n        var getHeight;\n\n        if (typeof maxHeight == 'undefined') {\n            maxHeight = this._styles._max;\n        }\n        this._initStyles();\n        this._updateContainerHeight();\n        if (!this.opts.cellHeight) { // The rest will be handled by CSS\n            return ;\n        }\n        if (this._styles._max !== 0 && maxHeight <= this._styles._max) {\n            return ;\n        }\n\n        if (!this.opts.verticalMargin || this.opts.cellHeightUnit === this.opts.verticalMarginUnit) {\n            getHeight = function(nbRows, nbMargins) {\n                return (self.opts.cellHeight * nbRows + self.opts.verticalMargin * nbMargins) +\n                    self.opts.cellHeightUnit;\n            };\n        } else {\n            getHeight = function(nbRows, nbMargins) {\n                if (!nbRows || !nbMargins) {\n                    return (self.opts.cellHeight * nbRows + self.opts.verticalMargin * nbMargins) +\n                        self.opts.cellHeightUnit;\n                }\n                return 'calc(' + ((self.opts.cellHeight * nbRows) + self.opts.cellHeightUnit) + ' + ' +\n                    ((self.opts.verticalMargin * nbMargins) + self.opts.verticalMarginUnit) + ')';\n            };\n        }\n\n        if (this._styles._max === 0) {\n            Utils.insertCSSRule(this._styles, prefix, 'min-height: ' + getHeight(1, 0) + ';', 0);\n        }\n\n        if (maxHeight > this._styles._max) {\n            for (var i = this._styles._max; i < maxHeight; ++i) {\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-height=\"' + (i + 1) + '\"]',\n                    'height: ' + getHeight(i + 1, i) + ';',\n                    i\n                );\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-min-height=\"' + (i + 1) + '\"]',\n                    'min-height: ' + getHeight(i + 1, i) + ';',\n                    i\n                );\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-max-height=\"' + (i + 1) + '\"]',\n                    'max-height: ' + getHeight(i + 1, i) + ';',\n                    i\n                );\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-y=\"' + i + '\"]',\n                    'top: ' + getHeight(i, i) + ';',\n                    i\n                );\n            }\n            this._styles._max = maxHeight;\n        }\n    };\n\n    GridStack.prototype._updateContainerHeight = function() {\n        if (this.grid._updateCounter) {\n            return;\n        }\n        var height = this.grid.getGridHeight();\n        this.container.attr('data-gs-current-height', height);\n        if (!this.opts.cellHeight) {\n            return ;\n        }\n        if (!this.opts.verticalMargin) {\n            this.container.css('height', (height * (this.opts.cellHeight)) + this.opts.cellHeightUnit);\n        } else if (this.opts.cellHeightUnit === this.opts.verticalMarginUnit) {\n            this.container.css('height', (height * (this.opts.cellHeight + this.opts.verticalMargin) -\n                this.opts.verticalMargin) + this.opts.cellHeightUnit);\n        } else {\n            this.container.css('height', 'calc(' + ((height * (this.opts.cellHeight)) + this.opts.cellHeightUnit) +\n                ' + ' + ((height * (this.opts.verticalMargin - 1)) + this.opts.verticalMarginUnit) + ')');\n        }\n    };\n\n    GridStack.prototype._isOneColumnMode = function() {\n        return (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) <=\n            this.opts.minWidth;\n    };\n\n    GridStack.prototype._setupRemovingTimeout = function(el) {\n        var self = this;\n        var node = $(el).data('_gridstack_node');\n\n        if (node._removeTimeout || !self.opts.removable) {\n            return;\n        }\n        node._removeTimeout = setTimeout(function() {\n            el.addClass('grid-stack-item-removing');\n            node._isAboutToRemove = true;\n        }, self.opts.removeTimeout);\n    };\n\n    GridStack.prototype._clearRemovingTimeout = function(el) {\n        var node = $(el).data('_gridstack_node');\n\n        if (!node._removeTimeout) {\n            return;\n        }\n        clearTimeout(node._removeTimeout);\n        node._removeTimeout = null;\n        el.removeClass('grid-stack-item-removing');\n        node._isAboutToRemove = false;\n    };\n\n    GridStack.prototype._prepareElementsByNode = function(el, node) {\n        var self = this;\n\n        var cellWidth;\n        var cellHeight;\n\n        var dragOrResize = function(event, ui) {\n            var x = Math.round(ui.position.left / cellWidth);\n            var y = Math.floor((ui.position.top + cellHeight / 2) / cellHeight);\n            var width;\n            var height;\n\n            if (event.type != 'drag') {\n                width = Math.round(ui.size.width / cellWidth);\n                height = Math.round(ui.size.height / cellHeight);\n            }\n\n            if (event.type == 'drag') {\n                if (x < 0 || x >= self.grid.width || y < 0 || (!self.grid.float && y > self.grid.getGridHeight())) {\n                    if (!node._temporaryRemoved) {\n                        if (self.opts.removable === true) {\n                            self._setupRemovingTimeout(el);\n                        }\n\n                        x = node._beforeDragX;\n                        y = node._beforeDragY;\n\n                        self.placeholder.detach();\n                        self.placeholder.hide();\n                        self.grid.removeNode(node);\n                        self._updateContainerHeight();\n\n                        node._temporaryRemoved = true;\n                    }\n                } else {\n                    self._clearRemovingTimeout(el);\n\n                    if (node._temporaryRemoved) {\n                        self.grid.addNode(node);\n                        self.placeholder\n                            .attr('data-gs-x', x)\n                            .attr('data-gs-y', y)\n                            .attr('data-gs-width', width)\n                            .attr('data-gs-height', height)\n                            .show();\n                        self.container.append(self.placeholder);\n                        node.el = self.placeholder;\n                        node._temporaryRemoved = false;\n                    }\n                }\n            } else if (event.type == 'resize')  {\n                if (x < 0) {\n                    return;\n                }\n            }\n            // width and height are undefined if not resizing\n            var lastTriedWidth = typeof width !== 'undefined' ? width : node.lastTriedWidth;\n            var lastTriedHeight = typeof height !== 'undefined' ? height : node.lastTriedHeight;\n            if (!self.grid.canMoveNode(node, x, y, width, height) ||\n                (node.lastTriedX === x && node.lastTriedY === y &&\n                node.lastTriedWidth === lastTriedWidth && node.lastTriedHeight === lastTriedHeight)) {\n                return;\n            }\n            node.lastTriedX = x;\n            node.lastTriedY = y;\n            node.lastTriedWidth = width;\n            node.lastTriedHeight = height;\n            self.grid.moveNode(node, x, y, width, height);\n            self._updateContainerHeight();\n        };\n\n        var onStartMoving = function(event, ui) {\n            self.container.append(self.placeholder);\n            var o = $(this);\n            self.grid.cleanNodes();\n            self.grid.beginUpdate(node);\n            cellWidth = self.cellWidth();\n            var strictCellHeight = Math.ceil(o.outerHeight() / o.attr('data-gs-height'));\n            cellHeight = self.container.height() / parseInt(self.container.attr('data-gs-current-height'));\n            self.placeholder\n                .attr('data-gs-x', o.attr('data-gs-x'))\n                .attr('data-gs-y', o.attr('data-gs-y'))\n                .attr('data-gs-width', o.attr('data-gs-width'))\n                .attr('data-gs-height', o.attr('data-gs-height'))\n                .show();\n            node.el = self.placeholder;\n            node._beforeDragX = node.x;\n            node._beforeDragY = node.y;\n\n            self.dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minWidth || 1));\n            self.dd.resizable(el, 'option', 'minHeight', strictCellHeight * (node.minHeight || 1));\n\n            if (event.type == 'resizestart') {\n                o.find('.grid-stack-item').trigger('resizestart');\n            }\n        };\n\n        var onEndMoving = function(event, ui) {\n            var o = $(this);\n            if (!o.data('_gridstack_node')) {\n                return;\n            }\n\n            var forceNotify = false;\n            self.placeholder.detach();\n            node.el = o;\n            self.placeholder.hide();\n\n            if (node._isAboutToRemove) {\n                forceNotify = true;\n                var gridToNotify = el.data('_gridstack_node')._grid;\n                gridToNotify._triggerRemoveEvent();\n                el.removeData('_gridstack_node');\n                el.remove();\n            } else {\n                self._clearRemovingTimeout(el);\n                if (!node._temporaryRemoved) {\n                    o\n                        .attr('data-gs-x', node.x)\n                        .attr('data-gs-y', node.y)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .removeAttr('style');\n                } else {\n                    o\n                        .attr('data-gs-x', node._beforeDragX)\n                        .attr('data-gs-y', node._beforeDragY)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .removeAttr('style');\n                    node.x = node._beforeDragX;\n                    node.y = node._beforeDragY;\n                    self.grid.addNode(node);\n                }\n            }\n            self._updateContainerHeight();\n            self._triggerChangeEvent(forceNotify);\n\n            self.grid.endUpdate();\n\n            var nestedGrids = o.find('.grid-stack');\n            if (nestedGrids.length && event.type == 'resizestop') {\n                nestedGrids.each(function(index, el) {\n                    $(el).data('gridstack').onResizeHandler();\n                });\n                o.find('.grid-stack-item').trigger('resizestop');\n                o.find('.grid-stack-item').trigger('gsresizestop');\n            }\n            if (event.type == 'resizestop') {\n                self.container.trigger('gsresizestop', o);\n            }\n        };\n\n        this.dd\n            .draggable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                drag: dragOrResize\n            })\n            .resizable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                resize: dragOrResize\n            });\n\n        if (node.noMove || (this._isOneColumnMode() && !self.opts.disableOneColumnMode) || this.opts.disableDrag) {\n            this.dd.draggable(el, 'disable');\n        }\n\n        if (node.noResize || (this._isOneColumnMode() && !self.opts.disableOneColumnMode) || this.opts.disableResize) {\n            this.dd.resizable(el, 'disable');\n        }\n\n        el.attr('data-gs-locked', node.locked ? 'yes' : null);\n    };\n\n    GridStack.prototype._prepareElement = function(el, triggerAddEvent) {\n        triggerAddEvent = typeof triggerAddEvent != 'undefined' ? triggerAddEvent : false;\n        var self = this;\n        el = $(el);\n\n        el.addClass(this.opts.itemClass);\n        var node = self.grid.addNode({\n            x: el.attr('data-gs-x'),\n            y: el.attr('data-gs-y'),\n            width: el.attr('data-gs-width'),\n            height: el.attr('data-gs-height'),\n            maxWidth: el.attr('data-gs-max-width'),\n            minWidth: el.attr('data-gs-min-width'),\n            maxHeight: el.attr('data-gs-max-height'),\n            minHeight: el.attr('data-gs-min-height'),\n            autoPosition: Utils.toBool(el.attr('data-gs-auto-position')),\n            noResize: Utils.toBool(el.attr('data-gs-no-resize')),\n            noMove: Utils.toBool(el.attr('data-gs-no-move')),\n            locked: Utils.toBool(el.attr('data-gs-locked')),\n            el: el,\n            id: el.attr('data-gs-id'),\n            _grid: self\n        }, triggerAddEvent);\n        el.data('_gridstack_node', node);\n\n        this._prepareElementsByNode(el, node);\n    };\n\n    GridStack.prototype.setAnimation = function(enable) {\n        if (enable) {\n            this.container.addClass('grid-stack-animate');\n        } else {\n            this.container.removeClass('grid-stack-animate');\n        }\n    };\n\n    GridStack.prototype.addWidget = function(el, x, y, width, height, autoPosition, minWidth, maxWidth,\n        minHeight, maxHeight, id) {\n        el = $(el);\n        if (typeof x != 'undefined') { el.attr('data-gs-x', x); }\n        if (typeof y != 'undefined') { el.attr('data-gs-y', y); }\n        if (typeof width != 'undefined') { el.attr('data-gs-width', width); }\n        if (typeof height != 'undefined') { el.attr('data-gs-height', height); }\n        if (typeof autoPosition != 'undefined') { el.attr('data-gs-auto-position', autoPosition ? 'yes' : null); }\n        if (typeof minWidth != 'undefined') { el.attr('data-gs-min-width', minWidth); }\n        if (typeof maxWidth != 'undefined') { el.attr('data-gs-max-width', maxWidth); }\n        if (typeof minHeight != 'undefined') { el.attr('data-gs-min-height', minHeight); }\n        if (typeof maxHeight != 'undefined') { el.attr('data-gs-max-height', maxHeight); }\n        if (typeof id != 'undefined') { el.attr('data-gs-id', id); }\n        this.container.append(el);\n        this._prepareElement(el, true);\n        this._triggerAddEvent();\n        this._updateContainerHeight();\n        this._triggerChangeEvent(true);\n\n        return el;\n    };\n\n    GridStack.prototype.makeWidget = function(el) {\n        el = $(el);\n        this._prepareElement(el, true);\n        this._triggerAddEvent();\n        this._updateContainerHeight();\n        this._triggerChangeEvent(true);\n\n        return el;\n    };\n\n    GridStack.prototype.willItFit = function(x, y, width, height, autoPosition) {\n        var node = {x: x, y: y, width: width, height: height, autoPosition: autoPosition};\n        return this.grid.canBePlacedWithRespectToHeight(node);\n    };\n\n    GridStack.prototype.removeWidget = function(el, detachNode) {\n        detachNode = typeof detachNode === 'undefined' ? true : detachNode;\n        el = $(el);\n        var node = el.data('_gridstack_node');\n\n        // For Meteor support: https://github.com/troolee/gridstack.js/pull/272\n        if (!node) {\n            node = this.grid.getNodeDataByDOMEl(el);\n        }\n\n        this.grid.removeNode(node, detachNode);\n        el.removeData('_gridstack_node');\n        this._updateContainerHeight();\n        if (detachNode) {\n            el.remove();\n        }\n        this._triggerChangeEvent(true);\n        this._triggerRemoveEvent();\n    };\n\n    GridStack.prototype.removeAll = function(detachNode) {\n        _.each(this.grid.nodes, _.bind(function(node) {\n            this.removeWidget(node.el, detachNode);\n        }, this));\n        this.grid.nodes = [];\n        this._updateContainerHeight();\n    };\n\n    GridStack.prototype.destroy = function(detachGrid) {\n        $(window).off('resize', this.onResizeHandler);\n        this.disable();\n        if (typeof detachGrid != 'undefined' && !detachGrid) {\n            this.removeAll(false);\n            this.container.removeData('gridstack');\n        } else {\n            this.container.remove();\n        }\n        Utils.removeStylesheet(this._stylesId);\n        if (this.grid) {\n            this.grid = null;\n        }\n    };\n\n    GridStack.prototype.resizable = function(el, val) {\n        var self = this;\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node == 'undefined' || node === null) {\n                return;\n            }\n\n            node.noResize = !(val || false);\n            if (node.noResize || (self._isOneColumnMode() && !self.opts.disableOneColumnMode)) {\n                self.dd.resizable(el, 'disable');\n            } else {\n                self.dd.resizable(el, 'enable');\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.movable = function(el, val) {\n        var self = this;\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node == 'undefined' || node === null) {\n                return;\n            }\n\n            node.noMove = !(val || false);\n            if (node.noMove || (self._isOneColumnMode() && !self.opts.disableOneColumnMode)) {\n                self.dd.draggable(el, 'disable');\n                el.removeClass('ui-draggable-handle');\n            } else {\n                self.dd.draggable(el, 'enable');\n                el.addClass('ui-draggable-handle');\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.enableMove = function(doEnable, includeNewWidgets) {\n        this.movable(this.container.children('.' + this.opts.itemClass), doEnable);\n        if (includeNewWidgets) {\n            this.opts.disableDrag = !doEnable;\n        }\n    };\n\n    GridStack.prototype.enableResize = function(doEnable, includeNewWidgets) {\n        this.resizable(this.container.children('.' + this.opts.itemClass), doEnable);\n        if (includeNewWidgets) {\n            this.opts.disableResize = !doEnable;\n        }\n    };\n\n    GridStack.prototype.disable = function() {\n        this.movable(this.container.children('.' + this.opts.itemClass), false);\n        this.resizable(this.container.children('.' + this.opts.itemClass), false);\n        this.container.trigger('disable');\n    };\n\n    GridStack.prototype.enable = function() {\n        this.movable(this.container.children('.' + this.opts.itemClass), true);\n        this.resizable(this.container.children('.' + this.opts.itemClass), true);\n        this.container.trigger('enable');\n    };\n\n    GridStack.prototype.locked = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node == 'undefined' || node === null) {\n                return;\n            }\n\n            node.locked = (val || false);\n            el.attr('data-gs-locked', node.locked ? 'yes' : null);\n        });\n        return this;\n    };\n\n    GridStack.prototype.maxHeight = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.maxHeight = (val || false);\n                el.attr('data-gs-max-height', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.minHeight = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.minHeight = (val || false);\n                el.attr('data-gs-min-height', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.maxWidth = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.maxWidth = (val || false);\n                el.attr('data-gs-max-width', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.minWidth = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.minWidth = (val || false);\n                el.attr('data-gs-min-width', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype._updateElement = function(el, callback) {\n        el = $(el).first();\n        var node = el.data('_gridstack_node');\n        if (typeof node == 'undefined' || node === null) {\n            return;\n        }\n\n        var self = this;\n\n        self.grid.cleanNodes();\n        self.grid.beginUpdate(node);\n\n        callback.call(this, el, node);\n\n        self._updateContainerHeight();\n        self._triggerChangeEvent();\n\n        self.grid.endUpdate();\n    };\n\n    GridStack.prototype.resize = function(el, width, height) {\n        this._updateElement(el, function(el, node) {\n            width = (width !== null && typeof width != 'undefined') ? width : node.width;\n            height = (height !== null && typeof height != 'undefined') ? height : node.height;\n\n            this.grid.moveNode(node, node.x, node.y, width, height);\n        });\n    };\n\n    GridStack.prototype.move = function(el, x, y) {\n        this._updateElement(el, function(el, node) {\n            x = (x !== null && typeof x != 'undefined') ? x : node.x;\n            y = (y !== null && typeof y != 'undefined') ? y : node.y;\n\n            this.grid.moveNode(node, x, y, node.width, node.height);\n        });\n    };\n\n    GridStack.prototype.update = function(el, x, y, width, height) {\n        this._updateElement(el, function(el, node) {\n            x = (x !== null && typeof x != 'undefined') ? x : node.x;\n            y = (y !== null && typeof y != 'undefined') ? y : node.y;\n            width = (width !== null && typeof width != 'undefined') ? width : node.width;\n            height = (height !== null && typeof height != 'undefined') ? height : node.height;\n\n            this.grid.moveNode(node, x, y, width, height);\n        });\n    };\n\n    GridStack.prototype.verticalMargin = function(val, noUpdate) {\n        if (typeof val == 'undefined') {\n            return this.opts.verticalMargin;\n        }\n\n        var heightData = Utils.parseHeight(val);\n\n        if (this.opts.verticalMarginUnit === heightData.unit && this.opts.height === heightData.height) {\n            return ;\n        }\n        this.opts.verticalMarginUnit = heightData.unit;\n        this.opts.verticalMargin = heightData.height;\n\n        if (!noUpdate) {\n            this._updateStyles();\n        }\n    };\n\n    GridStack.prototype.cellHeight = function(val, noUpdate) {\n        if (typeof val == 'undefined') {\n            if (this.opts.cellHeight) {\n                return this.opts.cellHeight;\n            }\n            var o = this.container.children('.' + this.opts.itemClass).first();\n            return Math.ceil(o.outerHeight() / o.attr('data-gs-height'));\n        }\n        var heightData = Utils.parseHeight(val);\n\n        if (this.opts.cellHeightUnit === heightData.heightUnit && this.opts.height === heightData.height) {\n            return ;\n        }\n        this.opts.cellHeightUnit = heightData.unit;\n        this.opts.cellHeight = heightData.height;\n\n        if (!noUpdate) {\n            this._updateStyles();\n        }\n\n    };\n\n    GridStack.prototype.cellWidth = function() {\n        return Math.round(this.container.outerWidth() / this.opts.width);\n    };\n\n    GridStack.prototype.getCellFromPixel = function(position, useOffset) {\n        var containerPos = (typeof useOffset != 'undefined' && useOffset) ?\n            this.container.offset() : this.container.position();\n        var relativeLeft = position.left - containerPos.left;\n        var relativeTop = position.top - containerPos.top;\n\n        var columnWidth = Math.floor(this.container.width() / this.opts.width);\n        var rowHeight = Math.floor(this.container.height() / parseInt(this.container.attr('data-gs-current-height')));\n\n        return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\n    };\n\n    GridStack.prototype.batchUpdate = function() {\n        this.grid.batchUpdate();\n    };\n\n    GridStack.prototype.commit = function() {\n        this.grid.commit();\n        this._updateContainerHeight();\n    };\n\n    GridStack.prototype.isAreaEmpty = function(x, y, width, height) {\n        return this.grid.isAreaEmpty(x, y, width, height);\n    };\n\n    GridStack.prototype.setStatic = function(staticValue) {\n        this.opts.staticGrid = (staticValue === true);\n        this.enableMove(!staticValue);\n        this.enableResize(!staticValue);\n        this._setStaticClass();\n    };\n\n    GridStack.prototype._setStaticClass = function() {\n        var staticClassName = 'grid-stack-static';\n\n        if (this.opts.staticGrid === true) {\n            this.container.addClass(staticClassName);\n        } else {\n            this.container.removeClass(staticClassName);\n        }\n    };\n\n    GridStack.prototype._updateNodeWidths = function(oldWidth, newWidth) {\n        this.grid._sortNodes();\n        this.grid.batchUpdate();\n        var node = {};\n        for (var i = 0; i < this.grid.nodes.length; i++) {\n            node = this.grid.nodes[i];\n            this.update(node.el, Math.round(node.x * newWidth / oldWidth), undefined,\n                Math.round(node.width * newWidth / oldWidth), undefined);\n        }\n        this.grid.commit();\n    };\n\n    GridStack.prototype.setGridWidth = function(gridWidth,doNotPropagate) {\n        this.container.removeClass('grid-stack-' + this.opts.width);\n        if (doNotPropagate !== true) {\n            this._updateNodeWidths(this.opts.width, gridWidth);\n        }\n        this.opts.width = gridWidth;\n        this.grid.width = gridWidth;\n        this.container.addClass('grid-stack-' + gridWidth);\n    };\n\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    GridStackEngine.prototype.batch_update = obsolete(GridStackEngine.prototype.batchUpdate);\n    GridStackEngine.prototype._fix_collisions = obsolete(GridStackEngine.prototype._fixCollisions,\n        '_fix_collisions', '_fixCollisions');\n    GridStackEngine.prototype.is_area_empty = obsolete(GridStackEngine.prototype.isAreaEmpty,\n        'is_area_empty', 'isAreaEmpty');\n    GridStackEngine.prototype._sort_nodes = obsolete(GridStackEngine.prototype._sortNodes,\n        '_sort_nodes', '_sortNodes');\n    GridStackEngine.prototype._pack_nodes = obsolete(GridStackEngine.prototype._packNodes,\n        '_pack_nodes', '_packNodes');\n    GridStackEngine.prototype._prepare_node = obsolete(GridStackEngine.prototype._prepareNode,\n        '_prepare_node', '_prepareNode');\n    GridStackEngine.prototype.clean_nodes = obsolete(GridStackEngine.prototype.cleanNodes,\n        'clean_nodes', 'cleanNodes');\n    GridStackEngine.prototype.get_dirty_nodes = obsolete(GridStackEngine.prototype.getDirtyNodes,\n        'get_dirty_nodes', 'getDirtyNodes');\n    GridStackEngine.prototype.add_node = obsolete(GridStackEngine.prototype.addNode,\n        'add_node', 'addNode, ');\n    GridStackEngine.prototype.remove_node = obsolete(GridStackEngine.prototype.removeNode,\n        'remove_node', 'removeNode');\n    GridStackEngine.prototype.can_move_node = obsolete(GridStackEngine.prototype.canMoveNode,\n        'can_move_node', 'canMoveNode');\n    GridStackEngine.prototype.move_node = obsolete(GridStackEngine.prototype.moveNode,\n        'move_node', 'moveNode');\n    GridStackEngine.prototype.get_grid_height = obsolete(GridStackEngine.prototype.getGridHeight,\n        'get_grid_height', 'getGridHeight');\n    GridStackEngine.prototype.begin_update = obsolete(GridStackEngine.prototype.beginUpdate,\n        'begin_update', 'beginUpdate');\n    GridStackEngine.prototype.end_update = obsolete(GridStackEngine.prototype.endUpdate,\n        'end_update', 'endUpdate');\n    GridStackEngine.prototype.can_be_placed_with_respect_to_height =\n        obsolete(GridStackEngine.prototype.canBePlacedWithRespectToHeight,\n        'can_be_placed_with_respect_to_height', 'canBePlacedWithRespectToHeight');\n    GridStack.prototype._trigger_change_event = obsolete(GridStack.prototype._triggerChangeEvent,\n        '_trigger_change_event', '_triggerChangeEvent');\n    GridStack.prototype._init_styles = obsolete(GridStack.prototype._initStyles,\n        '_init_styles', '_initStyles');\n    GridStack.prototype._update_styles = obsolete(GridStack.prototype._updateStyles,\n        '_update_styles', '_updateStyles');\n    GridStack.prototype._update_container_height = obsolete(GridStack.prototype._updateContainerHeight,\n        '_update_container_height', '_updateContainerHeight');\n    GridStack.prototype._is_one_column_mode = obsolete(GridStack.prototype._isOneColumnMode,\n        '_is_one_column_mode','_isOneColumnMode');\n    GridStack.prototype._prepare_element = obsolete(GridStack.prototype._prepareElement,\n        '_prepare_element', '_prepareElement');\n    GridStack.prototype.set_animation = obsolete(GridStack.prototype.setAnimation,\n        'set_animation', 'setAnimation');\n    GridStack.prototype.add_widget = obsolete(GridStack.prototype.addWidget,\n        'add_widget', 'addWidget');\n    GridStack.prototype.make_widget = obsolete(GridStack.prototype.makeWidget,\n        'make_widget', 'makeWidget');\n    GridStack.prototype.will_it_fit = obsolete(GridStack.prototype.willItFit,\n        'will_it_fit', 'willItFit');\n    GridStack.prototype.remove_widget = obsolete(GridStack.prototype.removeWidget,\n        'remove_widget', 'removeWidget');\n    GridStack.prototype.remove_all = obsolete(GridStack.prototype.removeAll,\n        'remove_all', 'removeAll');\n    GridStack.prototype.min_height = obsolete(GridStack.prototype.minHeight,\n        'min_height', 'minHeight');\n    GridStack.prototype.min_width = obsolete(GridStack.prototype.minWidth,\n        'min_width', 'minWidth');\n    GridStack.prototype._update_element = obsolete(GridStack.prototype._updateElement,\n        '_update_element', '_updateElement');\n    GridStack.prototype.cell_height = obsolete(GridStack.prototype.cellHeight,\n        'cell_height', 'cellHeight');\n    GridStack.prototype.cell_width = obsolete(GridStack.prototype.cellWidth,\n        'cell_width', 'cellWidth');\n    GridStack.prototype.get_cell_from_pixel = obsolete(GridStack.prototype.getCellFromPixel,\n        'get_cell_from_pixel', 'getCellFromPixel');\n    GridStack.prototype.batch_update = obsolete(GridStack.prototype.batchUpdate,\n        'batch_update', 'batchUpdate');\n    GridStack.prototype.is_area_empty = obsolete(GridStack.prototype.isAreaEmpty,\n        'is_area_empty', 'isAreaEmpty');\n    GridStack.prototype.set_static = obsolete(GridStack.prototype.setStatic,\n        'set_static', 'setStatic');\n    GridStack.prototype._set_static_class = obsolete(GridStack.prototype._setStaticClass,\n        '_set_static_class', '_setStaticClass');\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n    scope.GridStackUI = GridStack;\n\n    scope.GridStackUI.Utils = Utils;\n    scope.GridStackUI.Engine = GridStackEngine;\n    scope.GridStackUI.GridStackDragDropPlugin = GridStackDragDropPlugin;\n\n    $.fn.gridstack = function(opts) {\n        return this.each(function() {\n            var o = $(this);\n            if (!o.data('gridstack')) {\n                o\n                    .data('gridstack', new GridStack(this, opts));\n            }\n        });\n    };\n\n    return scope.GridStackUI;\n});\n\n\n//# sourceURL=webpack:///./node_modules/gridstack/dist/gridstack.js?");

/***/ }),

/***/ "JFKa":
/*!***********************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack.jQueryUI.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * gridstack.js 0.3.0\n * http://troolee.github.io/gridstack.js/\n * (c) 2014-2016 Pavel Reznikov, Dylan Weiss\n * gridstack.js may be freely distributed under the MIT license.\n * @preserve\n*/\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"EVdn\"), __webpack_require__(/*! lodash */ \"LvDl\"), __webpack_require__(/*! gridstack */ \"9BHx\"), __webpack_require__(/*! jquery-ui/data */ \"CumE\"), __webpack_require__(/*! jquery-ui/disable-selection */ \"THJS\"), __webpack_require__(/*! jquery-ui/focusable */ \"ybz5\"),\n            __webpack_require__(/*! jquery-ui/form */ \"121P\"), __webpack_require__(/*! jquery-ui/ie */ \"NHgk\"), __webpack_require__(/*! jquery-ui/keycode */ \"vBzC\"), __webpack_require__(/*! jquery-ui/labels */ \"r15H\"), __webpack_require__(/*! jquery-ui/jquery-1-7 */ \"jmh0\"),\n            __webpack_require__(/*! jquery-ui/plugin */ \"alHQ\"), __webpack_require__(/*! jquery-ui/safe-active-element */ \"yw1R\"), __webpack_require__(/*! jquery-ui/safe-blur */ \"yM/z\"), __webpack_require__(/*! jquery-ui/scroll-parent */ \"8Iik\"),\n            __webpack_require__(/*! jquery-ui/tabbable */ \"RJxi\"), __webpack_require__(/*! jquery-ui/unique-id */ \"y6ec\"), __webpack_require__(/*! jquery-ui/version */ \"Qwlt\"), __webpack_require__(/*! jquery-ui/widget */ \"MIQu\"),\n            __webpack_require__(/*! jquery-ui/widgets/mouse */ \"iGnl\"), __webpack_require__(/*! jquery-ui/widgets/draggable */ \"chtW\"), __webpack_require__(/*! jquery-ui/widgets/droppable */ \"kCXG\"),\n            __webpack_require__(/*! jquery-ui/widgets/resizable */ \"7UVs\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function($, _, GridStackUI) {\n\n    var scope = window;\n\n    /**\n    * @class JQueryUIGridStackDragDropPlugin\n    * jQuery UI implementation of drag'n'drop gridstack plugin.\n    */\n    function JQueryUIGridStackDragDropPlugin(grid) {\n        GridStackUI.GridStackDragDropPlugin.call(this, grid);\n    }\n\n    GridStackUI.GridStackDragDropPlugin.registerPlugin(JQueryUIGridStackDragDropPlugin);\n\n    JQueryUIGridStackDragDropPlugin.prototype = Object.create(GridStackUI.GridStackDragDropPlugin.prototype);\n    JQueryUIGridStackDragDropPlugin.prototype.constructor = JQueryUIGridStackDragDropPlugin;\n\n    JQueryUIGridStackDragDropPlugin.prototype.resizable = function(el, opts) {\n        el = $(el);\n        if (opts === 'disable' || opts === 'enable') {\n            el.resizable(opts);\n        } else if (opts === 'option') {\n            var key = arguments[2];\n            var value = arguments[3];\n            el.resizable(opts, key, value);\n        } else {\n            el.resizable(_.extend({}, this.grid.opts.resizable, {\n                start: opts.start || function() {},\n                stop: opts.stop || function() {},\n                resize: opts.resize || function() {}\n            }));\n        }\n        return this;\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.draggable = function(el, opts) {\n        el = $(el);\n        if (opts === 'disable' || opts === 'enable') {\n            el.draggable(opts);\n        } else {\n            el.draggable(_.extend({}, this.grid.opts.draggable, {\n                containment: this.grid.opts.isNested ? this.grid.container.parent() : null,\n                start: opts.start || function() {},\n                stop: opts.stop || function() {},\n                drag: opts.drag || function() {}\n            }));\n        }\n        return this;\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.droppable = function(el, opts) {\n        el = $(el);\n        if (opts === 'disable' || opts === 'enable') {\n            el.droppable(opts);\n        } else {\n            el.droppable({\n                accept: opts.accept\n            });\n        }\n        return this;\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.isDroppable = function(el, opts) {\n        el = $(el);\n        return Boolean(el.data('droppable'));\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.on = function(el, eventName, callback) {\n        $(el).on(eventName, callback);\n        return this;\n    };\n\n    return JQueryUIGridStackDragDropPlugin;\n});\n\n\n//# sourceURL=webpack:///./node_modules/gridstack/dist/gridstack.jQueryUI.js?");

/***/ }),

/***/ "eW3N":
/*!***************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./node_modules/gridstack/dist/gridstack.css?");

/***/ })

}]);