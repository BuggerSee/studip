{"version":3,"sources":["webpack:///./resources/assets/javascripts/lib/fullcalendar.js","webpack:///./resources/assets/javascripts/chunks/fullcalendar.js"],"names":["Date","prototype","getWeekNumber","d","UTC","this","getFullYear","getMonth","getDate","dayNum","getUTCDay","setUTCDate","getUTCDate","yearStart","getUTCFullYear","Math","ceil","STUDIP","Fullcalendar"],"mappings":"4QAoBAA,KAAKC,UAAUC,cAAgB,WAC3B,IAAIC,EAAI,IAAIH,KAAKA,KAAKI,IAAIC,KAAKC,cAAeD,KAAKE,WAAYF,KAAKG,YAChEC,EAASN,EAAEO,aAAe,EAC9BP,EAAEQ,WAAWR,EAAES,aAAe,EAAIH,GAClC,IAAII,EAAY,IAAIb,KAAKA,KAAKI,IAAID,EAAEW,iBAAiB,EAAE,IACvD,OAAOC,KAAKC,OAAQb,EAAIU,GAAa,MAAY,GAAG,ICfxDI,OAAOC,kBAAeA","file":"javascripts/fullcalendar-25c54a6dc5ef9974f4c5.chunk.js","sourcesContent":["/*jslint esversion: 6*/\n\n/**\n * This class contains Stud.IP specific code for the fullcalendar package.\n */\n\nimport { Calendar } from '@fullcalendar/core';\nimport deLocale from '@fullcalendar/core/locales/de';\nimport enLocale from '@fullcalendar/core/locales/en-gb';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { Draggable } from '@fullcalendar/interaction';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport resourceCommonPlugin from '@fullcalendar/resource-common';\nimport resourceTimeGridPlugin from '@fullcalendar/resource-timegrid';\nimport resourceTimelinePlugin from '@fullcalendar/resource-timeline';\n\nimport jsPDF from 'jspdf-yworks';\nimport html2canvas from 'html2canvas';\n\nDate.prototype.getWeekNumber = function () {\n    var d = new Date(Date.UTC(this.getFullYear(), this.getMonth(), this.getDate()));\n    var dayNum = d.getUTCDay() || 7;\n    d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n    var yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n    return Math.ceil((((d - yearStart) / 86400000) + 1)/7);\n};\n\nfunction pad(what, length = 2, char = '0') {\n    let padding = new Array(length + 1).join(char);\n    return `${padding}${what}`.substr(-length);\n}\n\nclass Fullcalendar\n{\n    /**\n     * The initialisation method. It loads the JS files for fullcalendar\n     * in case they are not loaded and sets up a fullcalendar instance\n     * for the nodes specified in the parameter node.\n     *\n     * @param DOMElement|string node The node which shall have a full calendar.\n     *     This must either be a DOMElement or a string\n     *     containing a CSS selector.\n     */\n    static init(node, fullcalendar_options = null)\n    {\n        // Convert css selector to actual dom element\n        node = $(node)[0];\n\n        if (!node) {\n            //We need a CSS selector or a node!\n            return;\n        }\n\n        if (document.getElementById('external-events')) {\n            new Draggable(document.getElementById('external-events'), {\n                itemSelector: '.fc-event',\n                eventData (eventEl) {\n                    return {\n                        title: eventEl.dataset.eventTitle,\n                        duration: eventEl.dataset.eventDuration,\n                        course_id: eventEl.dataset.eventCourse,\n                        tooltip: eventEl.dataset.eventTooltip,\n                        studip_api_urls: {drop: eventEl.dataset.eventDropUrl},\n                        studip_view_urls: {edit: eventEl.dataset.eventDetailsUrl}\n                    };\n                }\n            });\n        }\n\n        var calendar = new Calendar(node, fullcalendar_options);\n        node.calendar = calendar;\n        calendar.render();\n\n        return calendar;\n    }\n\n    /**\n     * Converts semester events to the default fullcalendar event format.\n     * The begin and end date are converted to fit into the current week.\n     */\n    static convertSemesterEvents(event_data)\n    {\n        if (!event_data) {\n            return {};\n        }\n\n        var start = String(event_data.start).split('T');\n        var end = String(event_data.end).split('T');\n\n        //start and end must be transformed to the current week.\n        //Therefore, we need the ISO weekdays for begin and end.\n        var fake_start = new Date();\n        fake_start.setHours(12);\n        fake_start.setMinutes(0);\n        fake_start.setSeconds(0);\n        var fake_end = new Date();\n        fake_end.setHours(12);\n        fake_end.setMinutes(0);\n        fake_end.setSeconds(0);\n\n        //Calculcate the week day of the current week for the event\n        //from the current day and convert sunday to ISO format\n        var start_day_diff = fake_start.getDay() || 7;\n        var end_day_diff = fake_end.getDay() || 7;\n\n        start_day_diff = start_day_diff - event_data.studip_weekday_begin;\n        end_day_diff = end_day_diff - event_data.studip_weekday_end;\n\n        fake_start = new Date(\n            fake_start.getTime() - start_day_diff * 24 * 60 * 60 * 1000\n        );\n        fake_end = new Date(\n            fake_end.getTime() - end_day_diff * 24 * 60 * 60 * 1000\n        );\n\n        //Output the modified begin and end date in the correct ISO format:\n        event_data.start = [\n            fake_start.getFullYear(),\n            + pad(fake_start.getMonth() + 1),\n            + pad(fake_start.getDate())\n        ].join('-') + 'T' + start[1];\n        event_data.end = [\n            fake_end.getFullYear(),\n            pad(fake_end.getMonth() + 1),\n            pad(fake_end.getDate())\n        ].join('-') + 'T' + end[1];\n\n        return event_data;\n    }\n\n\n    static createSemesterCalendarFromNode(node, additional_config = {})\n    {\n        if (!node) {\n            //Ain't no fullcalendar when the node's gone!\n            return;\n        }\n\n        var config = $.extend(\n            {},\n            $(node).data('config') || {},\n            additional_config\n        );\n\n        if (Array.isArray(config.eventSources)) {\n            config.eventSources = config.eventSources.map((s) => {\n                if (s.hasOwnProperty('url')) {\n                    return s;\n                }\n\n                return $.extend(\n                    {eventDataTransform: STUDIP.Fullcalendar.convertSemesterEvents},\n                    s\n                );\n            });\n        }\n\n        /* config = $.extend(\n            {\n                defaultView: 'dayGridWeek',\n                columnHeaderFormat: {hour: '2-digit', minute: '2-digit'},\n                header: {\n                    left: '',\n                    center: '',\n                    right: ''\n                }\n            },\n            additional_config || {}\n        ); */\n\n        return this.createFromNode(node, config);\n    }\n\n\n    static defaultResizeEventHandler(info)\n    {\n        if (!info.event.durationEditable || !info.view.viewSpec.options.editable) {\n            //Read-only events cannot be resized!\n            info.revert();\n            return;\n        }\n\n        if (info.event.extendedProps.studip_api_urls.resize) {\n            $.post({\n                url: info.event.extendedProps.studip_api_urls.resize,\n                async: false,\n                data: {\n                    begin: this.toRFC3339String(info.event.start),\n                    end: this.toRFC3339String(info.event.end)\n                }\n            }).fail(info.revert);\n        }\n    }\n\n    static downloadPDF(format = 'landscape', withWeekend = false)\n    {\n        $('*[data-fullcalendar=\"1\"]').each(function () {\n            if (this.calendar != undefined) {\n                $(this).addClass('print-view').toggleClass('without-weekend', !withWeekend);\n\n                var title = $(this).data('title');\n                let print_title = $('<h1>').text(title).prependTo(this);\n\n                window.scrollTo(0, 0);\n\n                html2canvas(this).then(canvas => {\n                    var imgData = canvas.toDataURL('image/jpeg');\n                    var pdf = new jsPDF({\n                        orientation: format === 'landscape' ? 'landscape' : 'portrait'\n                    });\n                    if (format === 'landscape') {\n                        pdf.addImage(imgData, 'JPEG', 20, 20, 250, 250, 'i1', 'NONE', 0);\n                    } else {\n                        pdf.addImage(imgData, 'JPEG', 25, 20, 160, 190, 'i1', 'NONE', 0);\n                    }\n                    pdf.save(title + '.pdf');\n                });\n\n                print_title.remove();\n                $(this).removeClass('print-view without-weekend');\n            }\n        });\n    }\n\n    static toRFC3339String(date)\n    {\n        var timezone_offset_min = date.getTimezoneOffset();\n        var offset_hrs = parseInt(Math.abs(timezone_offset_min / 60), 10);\n        var offset_min = Math.abs(timezone_offset_min%60);\n        var timezone_standard;\n\n        offset_hrs = pad(offset_hrs);\n        offset_min = pad(offset_min);\n\n        // Add an opposite sign to the offset\n        // If offset is 0, it means timezone is UTC\n        if (timezone_offset_min < 0) {\n            timezone_standard = `+${offset_hrs}:${offset_min}`;\n        } else if (timezone_offset_min > 0) {\n            timezone_standard = `-${offset_hrs}:${offset_min}`;\n        } else {\n            timezone_standard = '+00:00';\n        }\n\n        var current_date  = pad(date.getDate());\n        var current_month = pad(date.getMonth() + 1);\n        var current_year  = date.getFullYear();\n        var current_hrs   = pad(date.getHours());\n        var current_mins  = pad(date.getMinutes());\n        var current_secs  = pad(date.getSeconds());\n        var current_datetime;\n\n        // Current datetime\n        // String such as 2016-07-16T19:20:30\n        current_datetime = `${current_year}-${current_month}-${current_date}T${current_hrs}:${current_mins}:${current_secs}`;\n\n        return current_datetime + timezone_standard;\n    }\n\n    static defaultDropEventHandler(info)\n    {\n        // The logic from fullcalendar is inversed here:\n        // If the calendar isn't editable, the event isn't either.\n        if (!info.event.startEditable || !info.view.viewSpec.options.editable) {\n            //Read-only events cannot be dragged and dropped!\n            info.revert();\n            return;\n        }\n\n        var drop_resource_id = info.newResource ? info.newResource.id : info.event.extendedProps.studip_range_id;\n\n        if (info.event.extendedProps.studip_api_urls.move) {\n            if (info.event.allDay) {\n                $.post({\n                    async: false,\n                    url: info.event.extendedProps.studip_api_urls.move,\n                    data: {\n                        resource_id: drop_resource_id,\n                        begin: this.toRFC3339String(info.event.start.setHours(0,0,0)),\n                        end: this.toRFC3339String(info.event.start.setHours(23,59,59))\n                    }\n                }).fail(info.revert);\n            } else if (info.event.end === null) {\n                var real_end = new Date();\n                real_end.setTime(info.event.start.getTime());\n                real_end.setHours(info.event.start.getHours()+2);\n                $.post({\n                    async: false,\n                    url: info.event.extendedProps.studip_api_urls.move,\n                    data: {\n                        resource_id: drop_resource_id,\n                        begin: this.toRFC3339String(info.event.start),\n                        end: this.toRFC3339String(real_end)\n                    }\n                }).fail(info.revert);\n            } else {\n                $.post({\n                    async: false,\n                    url: info.event.extendedProps.studip_api_urls.move,\n                    data: {\n                        resource_id: drop_resource_id,\n                        begin: this.toRFC3339String(info.event.start),\n                        end: this.toRFC3339String(info.event.end)\n                    }\n                }).fail(info.revert);\n            }\n        }\n    }\n\n    static institutePlanDropEventHandler(info)\n    {\n        //The logic from fullcalendar is inversed here:\n        if (info.newResource) {\n            $.post({\n                async: false,\n                url: info.event.extendedProps.studip_api_urls.move,\n                data: {\n                    cycle_id: info.event.id,\n                    resource_id: info.newResource.id,\n                    begin: this.toRFC3339String(info.event.start),\n                    end: this.toRFC3339String(info.event.end)\n                }\n            }).fail(info.revert);\n        } else {\n            //If the calendar isn't editable, the event isn't either.\n            if (!info.event.startEditable || !info.view.viewSpec.options.editable) {\n                //Read-only events cannot be dragged and dropped!\n                info.revert();\n                return;\n            }\n\n            $.post({\n                async: false,\n                url: info.event.extendedProps.studip_api_urls.move,\n                data: {\n                    cycle_id: info.event.id,\n                    begin: this.toRFC3339String(info.event.start),\n                    end: this.toRFC3339String(info.event.end)\n                }\n            }).fail(info.revert);\n        }\n    }\n\n    static institutePlanExternalDropEventHandler(info)\n    {\n        var resourceIds = info.event.getResources().map(resource => resource.id);\n\n        $.post({\n            async: false,\n            url: info.event.extendedProps.studip_api_urls.drop,\n            data: {\n                course_id: info.event.extendedProps.course_id,\n                begin: this.toRFC3339String(info.event.start),\n                end: this.toRFC3339String(info.event.end),\n                resource_id: resourceIds[0]\n            }\n        }).done(data => {\n            if (data) {\n                info.view.calendar.addEvent(JSON.parse(data));\n                info.event.remove();\n            }\n        });\n    }\n\n    static createFromNode(node, additional_config = {})\n    {\n        if (!node) {\n            //No node? No fullcalendar!\n            return;\n        }\n\n        var config = $(node).data('config');\n\n        //Make sure the default values are set, if they are not found\n        //in the additional_config object:\n        config = $.extend({\n            plugins: [ interactionPlugin, dayGridPlugin, timeGridPlugin, resourceCommonPlugin, resourceTimeGridPlugin, resourceTimelinePlugin ],\n            schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',\n            defaultView: 'timeGridWeek',\n            header: {\n                left: 'dayGridMonth,timeGridWeek,timeGridDay'\n            },\n            minTime: '08:00:00',\n            maxTime: '20:00:00',\n            height: 'auto',\n            contentHeight: 'auto',\n            firstDay: 1,\n            weekNumberCalculation: 'ISO',\n            locales: [enLocale, deLocale ],\n            locale:  String.locale === 'de-DE' ? 'de' : 'en-gb',\n            timeFormat: 'H:mm',\n            nowIndicator: true,\n            timeZone: 'local',\n            studip_functions: [],\n            resourceAreaWidth: '20%',\n            select (selectionInfo) {\n                if (!selectionInfo.view.viewSpec.options.editable || !selectionInfo.view.viewSpec.options.studip_urls) {\n                    //The calendar isn't editable.\n                    return;\n                }\n                if (selectionInfo.view.viewSpec.options.studip_urls.add) {\n                    if (selectionInfo.resource) {\n                        STUDIP.Dialog.fromURL( selectionInfo.view.viewSpec.options.studip_urls.add, {\n                            data: {\n                                begin: selectionInfo.start.getTime()/1000,\n                                end: selectionInfo.end.getTime()/1000,\n                                ressource_id: selectionInfo.resource.id\n                            }\n                        });\n                    } else {\n                        STUDIP.Dialog.fromURL(selectionInfo.view.viewSpec.options.studip_urls.add, {\n                            data: {\n                                begin: selectionInfo.start.getTime()/1000,\n                                end: selectionInfo.end.getTime()/1000\n                            }\n                        });\n                    }\n                }\n            },\n            eventClick (eventClickInfo) {\n                var event = eventClickInfo.event;\n                var extended_props = event.extendedProps;\n\n                if ($(eventClickInfo.jsEvent.target).hasClass('event-colorpicker')) {\n                    STUDIP.Dialog.fromURL(\n                        STUDIP.URLHelper.getURL('dispatch.php/admin/courseplanning/pick_color/' + extended_props.metadate_id + '/' + config.actionCalled),\n                        {'size': '400x400'}\n                    );\n                    return false;\n                }\n\n                if (extended_props.studip_view_urls === undefined) {\n                    return;\n                }\n                if (!event.startEditable && extended_props.studip_view_urls.show) {\n                    STUDIP.Dialog.fromURL(\n                        STUDIP.URLHelper.getURL(extended_props.studip_view_urls.show)\n                    );\n                } else if (event.startEditable && extended_props.studip_view_urls.edit) {\n                    STUDIP.Dialog.fromURL(\n                        STUDIP.URLHelper.getURL(extended_props.studip_view_urls.edit)\n                    );\n                }\n                return false;\n            },\n            eventResize (info) {\n                // The logic from fullcalendar is inversed here:\n                // If the calendar isn't editable, the event isn't either.\n                if (info.view.viewSpec.options.studip_functions.resize_event) {\n                    info.view.viewSpec.options.studip_functions.resize_event(info);\n                } else {\n                    STUDIP.Fullcalendar.defaultResizeEventHandler(info);\n                }\n                info.event.source.refetch();\n            },\n            eventDrop (info) {\n                if ($(info.view.calendar.el).hasClass('institute-plan')) {\n                    var start = info.event.start;\n                    var cal_start = info.view.activeStart;\n                    if ((start.getHours() - cal_start.getHours()) % 2 === 1) {\n                        info.event.moveDates('-01:00');\n                    }\n                    STUDIP.Fullcalendar.institutePlanDropEventHandler(info);\n                } else {\n                    if (info.view.viewSpec.options.studip_functions.drop_event) {\n                        info.view.viewSpec.options.studip_functions.drop_event(info);\n                    } else {\n                        STUDIP.Fullcalendar.defaultDropEventHandler(info);\n                    }\n                    info.event.source.refetch();\n                }\n            },\n            eventRender (info) {\n                var event = info.event;\n                var eventElement = info.el;\n                var iconColor = event.textColor == '#000000' ? 'black' : 'white';\n\n                if ($(info.view.calendar.el).hasClass('institute-plan')) {\n                    $(eventElement).attr('title', event.extendedProps.tooltip);\n                    $(eventElement).find('.fc-title').html(\n                        $('<div>').css({\n                            width: 'calc(100% - 21px)',\n                            height: '100%',\n                            wordBreak: 'break-word'\n                        }).text(eventElement.text)\n                    );\n                    $(eventElement).find('.fc-title').append(\n                        $('<button class=\"event-colorpicker\">').addClass(iconColor)\n                    );\n                } else {\n                    $(eventElement).attr('title', event.title);\n                }\n\n                if (event.extendedProps.icon) {\n                    $(eventElement).find('.fc-title').prepend(\n                        $('<img>').attr('src', `${STUDIP.ASSETS_URL}images/icons/${iconColor}/${event.extendedProps.icon}.svg`)\n                            .css({\n                                verticalAlign: 'text-bottom',\n                                marginRight: '3px',\n                                width: 14,\n                                height: 14\n                            })\n                    );\n                }\n            },\n            loading (isLoading) {\n                if (isLoading) {\n                    if (!$('#loading-spinner').length) {\n                        $('.fullcalendar-header').after(\n                            $('<div id=\"loading-spinner\" style=\"margin-top: 5px; text-align:center;\">').html(\n                                $('<img>').attr('src', STUDIP.ASSETS_URL + 'images/ajax-indicator-black.svg')\n                                    .css({\n                                        width: 64,\n                                        height: 64\n                                    })\n                            )\n                        );\n                    }\n                } else {\n                    $('#loading-spinner').empty();\n                    this.updateSize();\n                }\n            },\n            datesRender (info) {\n                var view = info.view;\n                var start = view.activeStart;\n                var end = view.activeEnd;\n\n                if ($(view.calendar.el).hasClass('institute-plan')) {\n                    $('.fc-slats tr:odd .fc-widget-content:not(.fc-axis)').remove();\n                }\n\n                if ($('.booking-plan-header').length) {\n                    end.setDate(end.getDate()-1);\n                    var sem_start = $('.booking-plan-header').data('semester-begin');\n                    var sem_end = $('.booking-plan-header').data('semester-end');\n\n                    if (start.getTime() / 1000 < sem_start || start.getTime() / 1000 > sem_end) {\n                        sem_start = null;\n                        sem_end = null;\n                    } else {\n                        var sem_week = Math.floor((start.getTime() / 1000 - sem_start) / (7 * 24 * 60 * 60)) + 1;\n                        $('#booking-plan-header-semweek').text(sem_week);\n                    }\n\n                    $('#booking-plan-header-calweek').text(start.getWeekNumber());\n                    $('#booking-plan-header-calbegin').text(start.toLocaleDateString('de-DE', {weekday: 'short'}) + ' ' + start.toLocaleDateString('de-DE'));\n                    $('#booking-plan-header-calend').text(end.toLocaleDateString('de-DE', {weekday: 'short'}) + ' ' + end.toLocaleDateString('de-DE'));\n\n                    if (!sem_start || !sem_end) {\n                        STUDIP.Resources.updateBookingPlanSemesterByView(view);\n                    }\n                }\n            },\n            columnHeaderHtml (date) {\n                if ($(\"*[data-fullcalendar='1']\").hasClass('institute-plan')) {\n                    return '<a href=\"' + STUDIP.URLHelper.getURL('dispatch.php/admin/courseplanning/weekday/' + date.getDay()) + '\">' + date.toLocaleDateString('de-DE', config.columnHeaderFormat) + '</a>';\n                } else {\n                    return date.toLocaleDateString('de-DE', config.columnHeaderFormat);\n                }\n            },\n            resourceRender (renderInfo) {\n                if ($(renderInfo.view.calendar.el).hasClass('room-group-booking-plan')) {\n                    var action = $(renderInfo.view.calendar.el).hasClass('semester-plan') ? 'semester' : 'booking';\n                    var url = STUDIP.URLHelper.getURL(`dispatch.php/resources/room_planning/${action}_plan/${renderInfo.resource.id}`);\n\n                    $(renderInfo.el).find('.fc-cell-text').html(\n                        $('<a>').attr('href', url).text(renderInfo.el.innerText).append(\n                            $('<img>').attr('src', STUDIP.ASSETS_URL + 'images/icons/blue/link-intern.svg')\n                                .addClass('text-bottom')\n                                .css({\n                                    width: 16,\n                                    height: 16,\n                                    margin: '0px 5px'\n                                })\n                        )\n                    );\n                } else if ($(\"*[data-fullcalendar='1']\").hasClass('institute-plan') && renderInfo.resource.id > 0) {\n                    var icon = '<img class=\"text-bottom icon-role-clickable icon-shape-edit\" width=\"16\" height=\"16\" src=\"' + STUDIP.URLHelper.getURL('assets/images/icons/blue/edit.svg') + '\" alt=\"edit\">';\n                    $(renderInfo.el).append(\n                        '<a href=\"'\n                        + STUDIP.URLHelper.getURL('dispatch.php/admin/courseplanning/rename_column/'\n                        + renderInfo.resource.id\n                        +'/'\n                        + renderInfo.view.activeStart.getDay())\n                        + '\" data-dialog=\"size=auto\"> '\n                        + icon\n                        + '</a>'\n                    );\n                }\n            },\n            drop (dropInfo) {\n                $(dropInfo.draggedEl).remove();\n            },\n            eventReceive (info) {\n                if ($(info.view.calendar.el).hasClass('institute-plan')) {\n                    STUDIP.Fullcalendar.institutePlanExternalDropEventHandler(info);\n                }\n            }\n        }, config);\n\n        config = $.extend({}, config, additional_config);\n\n        return this.init(node, config);\n    }\n}\n","import '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/timeline/main.css';\nimport '@fullcalendar/resource-timeline/main.css';\n\nimport \"../../stylesheets/fullcalendar.scss\";\n\nimport Fullcalendar from '../lib/fullcalendar.js';\n\nSTUDIP.Fullcalendar = Fullcalendar;\n"],"sourceRoot":""}